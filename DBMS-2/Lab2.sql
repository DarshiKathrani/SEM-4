-- Create Department Table
CREATE TABLE Department (
 DepartmentID INT PRIMARY KEY,
 DepartmentName VARCHAR(100) NOT NULL UNIQUE
);
-- Create Designation Table
CREATE TABLE Designation (
 DesignationID INT PRIMARY KEY,
 DesignationName VARCHAR(100) NOT NULL UNIQUE
);
-- Create Person Table
CREATE TABLE Person (
 PersonID INT PRIMARY KEY IDENTITY(101,1),
 FirstName VARCHAR(100) NOT NULL,
 LastName VARCHAR(100) NOT NULL,
 Salary DECIMAL(8, 2) NOT NULL,
 JoiningDate DATETIME NOT NULL,
 DepartmentID INT NULL,
 DesignationID INT NULL,
 FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
 FOREIGN KEY (DesignationID) REFERENCES Designation(DesignationID)
);

--Part – A
--1. Department, Designation & Person Table’s INSERT, UPDATE & DELETE Procedures.
CREATE OR ALTER PROCEDURE PR_DEPARTMENT_INSERT
@DEPTID INT,
@DEPTNAME VARCHAR(100) 
AS
BEGIN
INSERT INTO Department VALUES(@DEPTID,@DEPTNAME)
END
SELECT * FROM DEPARTMENT
PR_DEPARTMENT_INSERT 2,'IT'

CREATE OR ALTER PROCEDURE PR_DESIGNATION_INSERT
@DEID INT,
@DENAME VARCHAR(100)
AS 
BEGIN
INSERT INTO DESIGNATION VALUES(@DEID,@DENAME)
END

SELECT * FROM DESIGNATION
PR_DESIGNATION_INSERT 15,'CEO'

CREATE OR ALTER PROCEDURE PR_PERSON_INSERT
@PERID INT,
@FNAME VARCHAR(50),
@LNAME VARCHAR(50),
@SALARY DECIMAL(8,2),
@JOININGDATE DATETIME,
@DEPTID INT,
@DEID INT
AS
BEGIN
INSERT INTO PERSON VALUES(@FNAME,@LNAME,@SALARY,@JOININGDATE,@DEPTID,@DEID)
END

PR_PERSON_INSERT 107,'NEHA','TRIVEDI',18000,'2014-02-20',3,15
SELECT * FROM PERSON

CREATE OR ALTER PROCEDURE PR_DEPARTMENT_UPDATE
@DEPTID INT,
@DEPTNAME VARCHAR(100)
AS
BEGIN 
UPDATE DEPARTMENT
SET DEPARTMENTNAME=@DEPTNAME
WHERE DEPARTMENTID=@DEPTID
END
PR_DEPARTMENT_UPDATE 2,'COMPUTER'

CREATE OR ALTER PROCEDURE PR_DESIGNATION_UPDATE
@DEID INT,
@DENAME VARCHAR(100)
AS 
BEGIN
UPDATE DESIGNATION
SET DESIGNATIONNAME=@DENAME
WHERE DESIGNATIONID=@DEID
END

SELECT * FROM DESIGNATION
PR_DESIGNATION_UPDATE 15,'FRESHER'




CREATE OR ALTER PROCEDURE PR_DESIGNATION_UPDATE
@DEID INT,
@DENAME VARCHAR(100)
AS 
BEGIN
UPDATE DESIGNATION
SET DESIGNATIONNAME=@DENAME
WHERE DESIGNATIONID=@DEID
END

SELECT * FROM DESIGNATION
PR_DESIGNATION_UPDATE 15,'FRESHER'

CREATE OR ALTER PROCEDURE PR_PERSON_UPDATE
@PERID INT,
@FNAME VARCHAR(50),
@LNAME VARCHAR(50),
@SALARY DECIMAL(8,2),
@JOININGDATE DATETIME
AS
BEGIN
UPDATE PERSON
SET
	FIRSTNAME=@FNAME,
	LASTNAME=@LNAME,
	SALARY=@SALARY,
	JOININGDATE=@JOININGDATE

WHERE PERSONID=@PERID
END

SELECT * FROM PERSON
PR_PERSON_UPDATE 101,'DARSHI','KATHRANI',56000,'1990-01-01'
DROP PROCEDURE PR_PERSON_UPDATE

CREATE OR ALTER PROCEDURE PR_DEPARTMENT_DELETE
@DEPTID INT
AS 
BEGIN
DELETE FROM DEPARTMENT
WHERE DEPARTMENTID=@DEPTID
END
PR_DEPARTMENT_DELETE 2


CREATE OR ALTER PROCEDURE PR_DESIGNATION_DELETE
@DEID INT
AS 
BEGIN
DELETE FROM DESIGNATION
WHERE DESIGNATIONID=@DEID
END

SELECT * FROM DESIGNATION
PR_DESIGNATION_DELETE 15


CREATE OR ALTER PROCEDURE PR_PERSON_DELETE
@PERID INT
AS 
BEGIN
DELETE FROM PERSON
WHERE PersonID=@PERID
END
PR_PERSON_DELETE 101

--2. Department, Designation & Person Table’s SELECTBYPRIMARYKEY
CREATE OR ALTER PROCEDURE PR_DEPARTMENT_SELECTBYPRIMARYKEY
@DEPTID INT
AS 
BEGIN
SELECT * FROM DEPARTMENT WHERE DEPARTMENTID=@DEPTID
END

PR_DEPARTMENT_SELECTBYPRIMARYKEY 1

CREATE OR ALTER PROCEDURE PR_DESIGNATION_SELECTBYPRIMARYKEY
@DEID INT
AS 
BEGIN
SELECT * FROM DESIGNATION WHERE DESIGNATIONID=@DEID
END

PR_DESIGNATION_SELECTBYPRIMARYKEY 11

CREATE OR ALTER PROCEDURE PR_PERSON_SELECTBYPRIMARYKEY
@PERID INT
AS 
BEGIN
SELECT * FROM PERSON WHERE PERSONID=@PERID
END

PR_PERSON_SELECTBYPRIMARYKEY 102

--3. Department, Designation & Person Table’s (If foreign key is available then do write join and take
--columns on select list)
CREATE OR ALTER PROCEDURE PR_DEPARTMENT_SELECTALL
AS 
BEGIN
SELECT * FROM DEPARTMENT
END
PR_DEPARTMENT_SELECTALL 

CREATE OR ALTER PROCEDURE PR_DESIGNATION_SELECTALL
AS 
BEGIN
SELECT * FROM DESIGNATION
END
PR_DESIGNATION_SELECTALL 

CREATE OR ALTER PROCEDURE PR_PERSON_SELECTALLBYJOIN
AS
BEGIN
SELECT PERSON.PERSONID,
PERSON.FIRSTNAME,
PERSON.LASTNAME,
PERSON.SALARY,
PERSON.JOININGDATE,
DEPARTMENT.DEPARTMENTNAME,
DESIGNATION.DESIGNATIONNAME
FROM PERSON
LEFT JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENTID=PERSON.DEPARTMENTID
LEFT JOIN DESIGNATION
ON DESIGNATION.DESIGNATIONID=PERSON.DESIGNATIONID
END
PR_PERSON_SELECTALLBYJOIN 
DROP PROCEDURE PR_PERSON_SELECTALLBYJOIN

--4. Create a Procedure that shows details of the first 3 persons.
CREATE OR ALTER PROCEDURE PR_PERSON_TOP3
AS
BEGIN
SELECT TOP 3 * FROM PERSON 
END

PR_PERSON_TOP3

--Part – B
--5. Create a Procedure that takes the department name as input and returns a table with all workers
--working in that department.
CREATE OR ALTER PROCEDURE PR_PERSON_BYDEPARTMENTNAME
@DEPTNAME VARCHAR(50)
AS
BEGIN
SELECT * 
FROM PERSON
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENTID=PERSON.DEPARTMENTID
WHERE DEPARTMENT.DEPARTMENTNAME=@DEPTNAME
END

PR_PERSON_BYDEPARTMENTNAME 'HR'

--6. Create Procedure that takes department name & designation name as input and returns a table with
--worker’s first name, salary, joining date & department name.
CREATE OR ALTER PROCEDURE PR_PERSON_JOIN1
@DEPTNAME VARCHAR(50),
@DENAME VARCHAR(50)
AS
BEGIN
SELECT PERSON.FIRSTNAME,
	   PERSON.SALARY,
	   PERSON.JOININGDATE,
	   DEPARTMENT.DEPARTMENTNAME
FROM PERSON
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENTID=PERSON.DEPARTMENTID
JOIN DESIGNATION
ON DESIGNATION.DESIGNATIONID=PERSON.DESIGNATIONID
WHERE DEPARTMENTNAME=@DEPTNAME AND DESIGNATIONNAME=@DENAME
END
PR_PERSON_JOIN1 'HR','CEO'

--7. Create a Procedure that takes the first name as an input parameter and display all the details of the
--worker with their department & designation name.
CREATE OR ALTER PROCEDURE PR_PERSON_JOIN2
@FNAME VARCHAR(50)
AS
BEGIN
SELECT 
	   PERSON.PERSONID,
	   PERSON.FIRSTNAME,
	   PERSON.LASTNAME,
	   PERSON.SALARY,
	   PERSON.JOININGDATE,
	   DEPARTMENT.DEPARTMENTNAME,
	   DESIGNATION.DESIGNATIONNAME
FROM PERSON
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENTID=PERSON.DEPARTMENTID
JOIN DESIGNATION
ON DESIGNATION.DESIGNATIONID=PERSON.DESIGNATIONID
WHERE FIRSTNAME=@FNAME
END

PR_PERSON_JOIN2 'HARDIK'

--8. Create Procedure which displays department wise maximum, minimum & total salaries.
CREATE OR ALTER PROCEDURE PR_PERSON_JOINWITHAGGREGATE
AS
BEGIN
SELECT 
	   SUM(PERSON.SALARY) AS TOTAL_SALARY,
	   MAX(PERSON.SALARY) AS MAX_SALARY,
	   MIN(PERSON.SALARY) AS MIN_SALARY,
	   DEPARTMENT.DEPARTMENTNAME
FROM PERSON
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENTID=PERSON.DEPARTMENTID
GROUP BY DEPARTMENT.DEPARTMENTNAME
END
PR_PERSON_JOINWITHAGGREGATE

--9. Create Procedure which displays designation wise average & total salaries.CREATE OR ALTER PROCEDURE PR_PERSON_JOINWITHAGGREGATE1
AS
BEGIN
SELECT 
	   SUM(PERSON.SALARY) AS TOTAL_SALARY,
	   AVG(PERSON.SALARY) AS MAX_SALARY,
	   DESIGNATION.DESIGNATIONNAME
FROM PERSON
JOIN DESIGNATION
ON DESIGNATION.DESIGNATIONID=PERSON.DESIGNATIONID
GROUP BY DESIGNATION.DESIGNATIONNAME
END
PR_PERSON_JOINWITHAGGREGATE1

--Part – C
--10. Create Procedure that Accepts Department Name and Returns Person Count.
CREATE OR ALTER PROCEDURE PR_PERSON_COUNT
@DEPTNAME VARCHAR(50),
@PERCOUNT INT OUTPUT
AS
BEGIN
SELECT 
		@PERCOUNT=COUNT(PERSON.PERSONID)
FROM PERSON
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENTID=PERSON.DEPARTMENTID
GROUP BY DEPARTMENT.DEPARTMENTNAME
HAVING DEPARTMENT.DEPARTMENTNAME=@DEPTNAME
END

DROP PROCEDURE PR_PERSON_COUNT

DECLARE @PERCNT INT
EXEC PR_PERSON_COUNT @DEPTNAME='HR',@PERCOUNT=@PERCNT OUTPUT
SELECT @PERCNT

--11. Create a procedure that takes a salary value as input and returns all workers with a salary greater than
--input salary value along with their department and designation details.
CREATE OR ALTER PROCEDURE PR_PERSON_GREATERSALARY
@SALARY DECIMAL(8,2)
AS
BEGIN
	SELECT PERSON.PERSONID,PERSON.SALARY,DEPARTMENT.DEPARTMENTNAME,DESIGNATION.DESIGNATIONNAME
	FROM PERSON
	JOIN DEPARTMENT
	ON PERSON.DEPARTMENTID=DEPARTMENT.DEPARTMENTID
	JOIN DESIGNATION
	ON PERSON.DESIGNATIONID=DESIGNATION.DESIGNATIONID
	WHERE SALARY>@SALARY
END
PR_PERSON_GREATERSALARY 25000

--12. Create a procedure to find the department(s) with the highest total salary among all departments.
CREATE OR ALTER PROCEDURE PR_DEPARTMENT_HIGHESTTOTALSALARY
AS
BEGIN
SELECT SUM(P.SALARY),D.DEPARTMENTNAME
FROM PERSON AS P
JOIN DEPARTMENT AS D
ON P.DEPARTMENTID=D.DEPARTMENTID
GROUP BY D.DEPARTMENTNAME
HAVING SUM(P.SALARY)=
(SELECT MAX(TOTAL)FROM
(SELECT  SUM(P.SALARY) AS TOTAL FROM PERSON AS P1
JOIN DEPARTMENT AS D
ON D.DEPARTMENTID=P.DEPARTMENTID
GROUP BY D.DEPARTMENTNAME
) AS DEPT)

END
PR_DEPARTMENT_HIGHESTTOTALSALARY

--13. Create a procedure that takes a designation name as input and returns a list of all workers under that
--designation who joined within the last 10 years, along with their department.
CREATE OR ALTER PROCEDURE PR_PERSON_WITHIN10YEARS
@DENAME VARCHAR(50)
AS
BEGIN
SELECT DE.DESIGNATIONNAME,P.FIRSTNAME,D.DEPARTMENTNAME
FROM PERSON AS P
JOIN DEPARTMENT AS D
ON D.DEPARTMENTID=P.DEPARTMENTID
JOIN DESIGNATION AS DE
ON DE.DESIGNATIONID=P.DESIGNATIONID
WHERE DE.DESIGNATIONNAME=@DENAME AND DATEDIFF(YEAR,P.JOININGDATE,GETDATE())<=10
END
PR_PERSON_WITHIN10YEARS 'CLERK'
--14. Create a procedure to list the number of workers in each department who do not have a designation
--assigned.
CREATE OR ALTER PROCEDURE PR_PERSON_NODESIGNATION
AS
BEGIN
SELECT COUNT(P.FIRSTNAME),D.DEPARTMENTNAME
FROM PERSON AS P
JOIN DEPARTMENT AS D
ON D.DEPARTMENTID=P.DEPARTMENTID
LEFT JOIN DESIGNATION AS DE
ON DE.DESIGNATIONID=P.DESIGNATIONID
WHERE P.DESIGNATIONID IS NULL
GROUP BY D.DEPARTMENTNAME
END
SELECT * FROM PERSON
SELECT * FROM DEPARTMENT

PR_PERSON_NODESIGNATION
--15. Create a procedure to retrieve the details of workers in departments where the average salary is above
--12000.CREATE OR ALTER PROCEDURE PR_PERSON_HIGHAVGSALARYASBEGINSELECT 	PERSON.FIRSTNAME,PERSON.SALARY	FROM PERSON	JOIN DEPARTMENT	ON PERSON.DEPARTMENTID=DEPARTMENT.DEPARTMENTID	GROUP BY PERSON.FIRSTNAME,PERSON.SALARY	HAVING AVG(PERSON.SALARY)>12000ENDPR_PERSON_HIGHAVGSALARY